============================================ PROMPT ============================================

Przygotuj bibliotękę w pythonie bazując na wzorcu projektowym page object pattern dla strony https://demoqa.com/
dla podstrony elements Text Box, Check Box, Web Tables, a wszystkie lokatory trzymaj w osobnym folderze locators w formacie xpath.
Nazwy metod oprzyj o CRUD

============================================ RESPONSE ============================================

Aby stworzyć bibliotekę w Pythonie opartą na wzorcu projektowym Page Object Pattern (POP) dla strony https://demoqa.com/, skupimy się na podstronie "Elements" i jej sekcjach: Text Box, Check Box oraz Web Tables. Wszystkie lokatory będą przechowywane w osobnym folderze locators w formacie XPath. Metody będą oparte o operacje CRUD (Create, Read, Update, Delete).

Struktura projektu
Copy
demoqa_tests/
│
├── locators/
│   ├── text_box_locators.py
│   ├── check_box_locators.py
│   └── web_tables_locators.py
│
├── pages/
│   ├── base_page.py
│   ├── text_box_page.py
│   ├── check_box_page.py
│   └── web_tables_page.py
│
└── tests/
    ├── test_text_box.py
    ├── test_check_box.py
    └── test_web_tables.py
1. Lokatory
locators/text_box_locators.py
python
Copy
class TextBoxLocators:
    FULL_NAME_INPUT = "//input[@id='userName']"
    EMAIL_INPUT = "//input[@id='userEmail']"
    CURRENT_ADDRESS_INPUT = "//textarea[@id='currentAddress']"
    PERMANENT_ADDRESS_INPUT = "//textarea[@id='permanentAddress']"
    SUBMIT_BUTTON = "//button[@id='submit']"
    OUTPUT_NAME = "//p[@id='name']"
    OUTPUT_EMAIL = "//p[@id='email']"
    OUTPUT_CURRENT_ADDRESS = "//p[@id='currentAddress']"
    OUTPUT_PERMANENT_ADDRESS = "//p[@id='permanentAddress']"
locators/check_box_locators.py
python
Copy
class CheckBoxLocators:
    EXPAND_ALL_BUTTON = "//button[@title='Expand all']"
    COLLAPSE_ALL_BUTTON = "//button[@title='Collapse all']"
    CHECKBOX_HOME = "//span[@class='rct-title' and text()='Home']"
    CHECKBOX_DESKTOP = "//span[@class='rct-title' and text()='Desktop']"
    CHECKBOX_NOTES = "//span[@class='rct-title' and text()='Notes']"
    CHECKBOX_COMMANDS = "//span[@class='rct-title' and text()='Commands']"
    CHECKBOX_DOCUMENTS = "//span[@class='rct-title' and text()='Documents']"
    CHECKBOX_WORKSPACE = "//span[@class='rct-title' and text()='WorkSpace']"
    CHECKBOX_REACT = "//span[@class='rct-title' and text()='React']"
    CHECKBOX_ANGULAR = "//span[@class='rct-title' and text()='Angular']"
    CHECKBOX_VEU = "//span[@class='rct-title' and text()='Veu']"
    CHECKBOX_DOWNLOADS = "//span[@class='rct-title' and text()='Downloads']"
    CHECKBOX_WORD_FILE = "//span[@class='rct-title' and text()='Word File.doc']"
    CHECKBOX_EXCEL_FILE = "//span[@class='rct-title' and text()='Excel File.doc']"
    OUTPUT_RESULT = "//div[@id='result']"
locators/web_tables_locators.py
python
Copy
class WebTablesLocators:
    ADD_BUTTON = "//button[@id='addNewRecordButton']"
    FIRST_NAME_INPUT = "//input[@id='firstName']"
    LAST_NAME_INPUT = "//input[@id='lastName']"
    EMAIL_INPUT = "//input[@id='userEmail']"
    AGE_INPUT = "//input[@id='age']"
    SALARY_INPUT = "//input[@id='salary']"
    DEPARTMENT_INPUT = "//input[@id='department']"
    SUBMIT_BUTTON = "//button[@id='submit']"
    SEARCH_BOX = "//input[@id='searchBox']"
    EDIT_BUTTON = "//span[@title='Edit']"
    DELETE_BUTTON = "//span[@title='Delete']"
    ROW_DATA = "//div[@class='rt-tr-group']"
2. Strony
pages/base_page.py
python
Copy
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

class BasePage:
    def __init__(self, driver):
        self.driver = driver

    def click(self, locator):
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, locator))).click()

    def send_keys(self, locator, text):
        WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, locator))).send_keys(text)

    def get_text(self, locator):
        return WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, locator))).text
pages/text_box_page.py
python
Copy
from .base_page import BasePage
from locators.text_box_locators import TextBoxLocators

class TextBoxPage(BasePage):
    def __init__(self, driver):
        super().__init__(driver)

    def create_user(self, full_name, email, current_address, permanent_address):
        self.send_keys(TextBoxLocators.FULL_NAME_INPUT, full_name)
        self.send_keys(TextBoxLocators.EMAIL_INPUT, email)
        self.send_keys(TextBoxLocators.CURRENT_ADDRESS_INPUT, current_address)
        self.send_keys(TextBoxLocators.PERMANENT_ADDRESS_INPUT, permanent_address)
        self.click(TextBoxLocators.SUBMIT_BUTTON)

    def read_user_data(self):
        return {
            "name": self.get_text(TextBoxLocators.OUTPUT_NAME),
            "email": self.get_text(TextBoxLocators.OUTPUT_EMAIL),
            "current_address": self.get_text(TextBoxLocators.OUTPUT_CURRENT_ADDRESS),
            "permanent_address": self.get_text(TextBoxLocators.OUTPUT_PERMANENT_ADDRESS)
        }
pages/check_box_page.py
python
Copy
from .base_page import BasePage
from locators.check_box_locators import CheckBoxLocators

class CheckBoxPage(BasePage):
    def __init__(self, driver):
        super().__init__(driver)

    def expand_all(self):
        self.click(CheckBoxLocators.EXPAND_ALL_BUTTON)

    def collapse_all(self):
        self.click(CheckBoxLocators.COLLAPSE_ALL_BUTTON)

    def select_checkbox(self, checkbox_locator):
        self.click(checkbox_locator)

    def get_output_result(self):
        return self.get_text(CheckBoxLocators.OUTPUT_RESULT)
pages/web_tables_page.py
python
Copy
from .base_page import BasePage
from locators.web_tables_locators import WebTablesLocators

class WebTablesPage(BasePage):
    def __init__(self, driver):
        super().__init__(driver)

    def add_record(self, first_name, last_name, email, age, salary, department):
        self.click(WebTablesLocators.ADD_BUTTON)
        self.send_keys(WebTablesLocators.FIRST_NAME_INPUT, first_name)
        self.send_keys(WebTablesLocators.LAST_NAME_INPUT, last_name)
        self.send_keys(WebTablesLocators.EMAIL_INPUT, email)
        self.send_keys(WebTablesLocators.AGE_INPUT, age)
        self.send_keys(WebTablesLocators.SALARY_INPUT, salary)
        self.send_keys(WebTablesLocators.DEPARTMENT_INPUT, department)
        self.click(WebTablesLocators.SUBMIT_BUTTON)

    def search_record(self, search_text):
        self.send_keys(WebTablesLocators.SEARCH_BOX, search_text)

    def edit_record(self, new_first_name):
        self.click(WebTablesLocators.EDIT_BUTTON)
        self.send_keys(WebTablesLocators.FIRST_NAME_INPUT, new_first_name)
        self.click(WebTablesLocators.SUBMIT_BUTTON)

    def delete_record(self):
        self.click(WebTablesLocators.DELETE_BUTTON)

    def get_row_data(self):
        return self.get_text(WebTablesLocators.ROW_DATA)
3. Testy
tests/test_text_box.py
python
Copy
import pytest
from selenium import webdriver
from pages.text_box_page import TextBoxPage
from locators.text_box_locators import TextBoxLocators

@pytest.fixture
def driver():
    driver = webdriver.Chrome()
    driver.get("https://demoqa.com/text-box")
    yield driver
    driver.quit()

def test_create_user(driver):
    text_box_page = TextBoxPage(driver)
    text_box_page.create_user("John Doe", "john.doe@example.com", "123 Main St", "456 Secondary St")
    user_data = text_box_page.read_user_data()
    assert "John Doe" in user_data["name"]
    assert "john.doe@example.com" in user_data["email"]
    assert "123 Main St" in user_data["current_address"]
    assert "456 Secondary St" in user_data["permanent_address"]
tests/test_check_box.py
python
Copy
import pytest
from selenium import webdriver
from pages.check_box_page import CheckBoxPage
from locators.check_box_locators import CheckBoxLocators

@pytest.fixture
def driver():
    driver = webdriver.Chrome()
    driver.get("https://demoqa.com/checkbox")
    yield driver
    driver.quit()

def test_select_checkbox(driver):
    check_box_page = CheckBoxPage(driver)
    check_box_page.expand_all()
    check_box_page.select_checkbox(CheckBoxLocators.CHECKBOX_HOME)
    output_result = check_box_page.get_output_result()
    assert "home" in output_result.lower()
tests/test_web_tables.py
python
Copy
import pytest
from selenium import webdriver
from pages.web_tables_page import WebTablesPage
from locators.web_tables_locators import WebTablesLocators

@pytest.fixture
def driver():
    driver = webdriver.Chrome()
    driver.get("https://demoqa.com/webtables")
    yield driver
    driver.quit()

def test_add_record(driver):
    web_tables_page = WebTablesPage(driver)
    web_tables_page.add_record("John", "Doe", "john.doe@example.com", "30", "50000", "IT")
    web_tables_page.search_record("John")
    row_data = web_tables_page.get_row_data()
    assert "John" in row_data
    assert "Doe" in row_data
    assert "john.doe@example.com" in row_data
    assert "30" in row_data
    assert "50000" in row_data
    assert "IT" in row_data

def test_edit_record(driver):
    web_tables_page = WebTablesPage(driver)
    web_tables_page.edit_record("Jane")
    web_tables_page.search_record("Jane")
    row_data = web_tables_page.get_row_data()
    assert "Jane" in row_data

def test_delete_record(driver):
    web_tables_page = WebTablesPage(driver)
    web_tables_page.delete_record()
    row_data = web_tables_page.get_row_data()
    assert "John" not in row_data
Podsumowanie
Ta struktura projektu opiera się na wzorcu Page Object Pattern, co ułatwia zarządzanie lokatorami i metodami. Każda strona ma swoje własne metody CRUD, a lokatory są przechowywane w osobnym folderze, co zwiększa czytelność i łatwość utrzymania kodu. Testy są napisane w sposób, który pozwala na łatwe rozszerzenie funkcjonalności.